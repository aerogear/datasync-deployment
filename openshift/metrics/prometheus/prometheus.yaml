apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prometheus
  annotations:
    "openshift.io/display-name": Prometheus
    description: |
      A Prometheus deployment that can be customized to monitor components and dispatch alerts. It is secure by default and can be used to monitor arbitrary clients.
    iconClass: fa fa-cogs
    tags: "monitoring,prometheus,alertmanager,time-series"
parameters:
- description: The location of the proxy image
  name: IMAGE_PROXY
  value: docker.io/openshift/oauth-proxy:v1.1.0
- description: The location of the prometheus image
  name: IMAGE_PROMETHEUS
  value: registry.redhat.io/openshift3/prometheus:v3.11
- description: The location of the alertmanager image
  name: IMAGE_ALERTMANAGER
  value: registry.redhat.io/openshift3/prometheus-alertmanager:v3.11
- description: The location of alert-buffer image
  name: IMAGE_ALERT_BUFFER
  value: registry.redhat.io/openshift3/prometheus-alert-buffer:v3.10

objects:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    creationTimestamp: null
    name: monitor-service
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - services
    - endpoints
    - persistentvolumeclaims
    - events
    - configmaps
    - secrets
    - serviceaccounts
    verbs:
    - '*'
  - apiGroups:
    - apps
    resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
    verbs:
    - '*'
  - apiGroups:
    - route.openshift.io
    resources:
    - routes
    - routes/custom-host
    verbs:
    - '*'
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs:
    - '*'

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prom
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.prom: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prom"}}'
      serviceaccounts.openshift.io/oauth-redirectreference.alerts: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prom-alerts"}}'

- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: prometheus-monitoring
  subjects:
  - kind: ServiceAccount
    name: prom
  roleRef:
    kind: Role
    name: monitor-service
    apiGroup: rbac.authorization.k8s.io

# Create a fully end-to-end TLS connection to the prometheus proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: prom
  spec:
    to:
      name: prom
    tls:
      termination: edge
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: prom
    name: prom
  spec:
    ports:
    - name: prometheus
      port: 443
      protocol: TCP
      targetPort: 4181
    selector:
      app: prom
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: prom
    name: prometheus-internal
  spec:
    ports:
    - name: prometheus
      port: 80
      targetPort: 9090
    selector:
      app: prom
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    labels:
      app: prom
    name: prom
  spec:
    updateStrategy:
      type: RollingUpdate
    podManagementPolicy: Parallel
    selector:
      matchLabels:
        app: prom
    template:
      metadata:
        labels:
          app: prom
        name: prom
      spec:
        serviceAccountName: prom
        containers:
        # Deploy Prometheus behind an oauth proxy
        - name: prom-proxy
          resources:
            requests:
              cpu: 500m
            limits:
              cpu: 500m
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 4181
            name: web
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          args:
          - -provider=openshift
          - -http-address=0.0.0.0:4181
          - -https-address=
          - -upstream=http://localhost:9090
          - --openshift-service-account=prom
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "resourceName": "$(NAMESPACE)", "namespace": "$(NAMESPACE)"}'
          - -cookie-secret=SECRET
          - -skip-auth-regex=^/metrics
          volumeMounts:
          - mountPath: /prometheus
            name: prometheus-data

        - name: prometheus
          ports:
            - containerPort: 9090
              protocol: TCP
          resources:
            requests:
              cpu: 500m
            limits:
              cpu: 500m
          args:
          - --storage.tsdb.retention=6h
          - --config.file=/etc/prometheus/prometheus-config.yaml
          - --web.listen-address=:9090
          image: ${IMAGE_PROMETHEUS}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /etc/prometheus
            name: prometheus-config
          - mountPath: /prometheus
            name: prometheus-data

        # Deploy alertmanager behind an oauth proxy
        # use http port=4190 and https port=9943 to differ from prom-proxy
        - name: alerts-proxy
          resources:
            requests:
              cpu: 500m
            limits:
              cpu: 500m
          image: ${IMAGE_PROXY}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 4190
            name: web
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          args:
          - -provider=openshift
          - -http-address=0.0.0.0:4190
          - -https-address=
          - -upstream=http://localhost:9093
          - --openshift-service-account=prom
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "resourceName": "$(NAMESPACE)", "namespace": "$(NAMESPACE)"}'
          - -cookie-secret=SECRET

        - name: alertmanager
          resources:
            requests:
              cpu: 500m
            limits:
              cpu: 500m
          args:
          - --config.file=/etc/alertmanager/alertmanager-config.yaml
          image: ${IMAGE_ALERTMANAGER}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9093
            name: web
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-config
          - mountPath: /alertmanager
            name: alertmanager-data

        restartPolicy: Always
        volumes:
        - name: prometheus-config
          secret:
            secretName: prom
        - name: prometheus-data
          emptyDir: {}
        - name: alertmanager-config
          secret:
            secretName: prom-alerts
        - name: alertmanager-data
          emptyDir: {}

# Create a fully end-to-end TLS connection to the alert proxy
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: prom-alerts
  spec:
    to:
      name: prom-alerts
    tls:
      termination: edge
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: prom-alerts
    name: prom-alerts
  spec:
    ports:
    - name: alerts
      port: 443
      protocol: TCP
      targetPort: 4190
    selector:
      app: prom